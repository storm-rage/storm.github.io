(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{302:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),s("h2",{attrs:{id:"string-123-和new-string-123"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-123-和new-string-123"}},[t._v("#")]),t._v(" string('123')和new String('123')")]),t._v(" "),s("p",[t._v("一道面试题")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出结果为？")]),t._v("\n")])])]),s("ul",[s("li",[t._v("var str = 'hello world'　　定义了一个 str 变量，同时给变量 str 赋值 'hello world' 字符串，此时 str 的值为字符串 'hello world'，类型为基本类型。")]),t._v(" "),s("li",[t._v("var str1 = String('hello world')　　这是字符串声明的形式创建了字符串，此时 str1 的值也为字符串 'hello world'，类型为基本类型。")]),t._v(" "),s("li",[t._v("var str2 = new String('hello world')　　此时的String为一个构造函数，而 new 操作符创建了一个字符串对象，此时的 str2 为字符串对象，类型为引用类型。")])]),t._v(" "),s("p",[t._v("综上分析可知")]),t._v(" "),s("p",[t._v("console.log(str1 === str)　　//　ture（str和str1同为字符串，且值相同）\nconsole.log(str2 === str)　　//　false（str2为字符串对象，对象和基本类型值不相等）")]),t._v(" "),s("h2",{attrs:{id:"数据类型判断方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型判断方式"}},[t._v("#")]),t._v(" 数据类型判断方式")]),t._v(" "),s("ul",[s("li",[t._v("typeOf 可以判断基本类型数据，缺点判断数组，对象，函数，null会返回object")]),t._v(" "),s("li",[t._v("instanceof 判断是否是某个类型的实例，官方解释：instanceOf用来检测构造函数的"),s("code",[t._v("prototype")]),t._v("是否出现在某个实例对象的原型链上，语法 object instanceof constructor")]),t._v(" "),s("li",[t._v("constructor.name 基本数据类型不具备该属性，尝试访问会导致"),s("code",[t._v("TypeError")]),t._v(";对象数组函数，内置对象Date,RegExp,Error等都有该属性，可以使用这个来判断")]),t._v(" "),s("li",[t._v("Object.prototype.toString.call() 返回格式为[object xxx]，xxx为数据格式")])]),t._v(" "),s("h2",{attrs:{id:"settimeout、promise、async-await-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#settimeout、promise、async-await-的区别"}},[t._v("#")]),t._v(" setTimeout、Promise、Async/Await 的区别")]),t._v(" "),s("p",[t._v("setTimeout, Promise, 和 async/await 是JavaScript中处理异步操作的三种不同机制。它们各自有独特的用途和工作原理")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("setTimeout回调函数中的为宏任务，放在任务队列中，当主线程执行完所有同步任务，才会执行回调函数")])]),t._v(" "),s("li",[s("p",[t._v("promise是微任务，当主线程执行完所有同步任务，才会执行微任务，微任务执行完，才会执行宏任务")])]),t._v(" "),s("li",[s("p",[t._v("async/await是语法糖，async函数返回一个promise对象，await是等待promise对象，当promise对象resolved, await后边的代码才会执行")])]),t._v(" "),s("li",[s("p",[t._v("主要区别")]),t._v(" "),s("ul",[s("li",[t._v("setTimeout和promise都是异步执行，")]),t._v(" "),s("li",[t._v("async/await是同步执行，async/await是语法糖，可以理解为promise的语法糖")]),t._v(" "),s("li",[t._v("setTimeout和promise都是异步执行，但是promise可以链式调用，setTimeout不可以链式调用")])])]),t._v(" "),s("li",[s("p",[t._v("执行顺序")]),t._v(" "),s("ol",[s("li",[t._v("setTimeout是宏任务，promise是微任务，"),s("code",[t._v("async/await")]),t._v("是同步执行")]),t._v(" "),s("li",[s("code",[t._v("async/await")]),t._v(" 本质上是基于 Promise 实现的异步操作方式。当遇到 "),s("code",[t._v("await")]),t._v(" 关键字时，函数会暂停执行，等待 "),s("code",[t._v("await")]),t._v(" 后面的 Promise 对象的状态变为 "),s("code",[t._v("fulfilled")]),t._v(" 或 "),s("code",[t._v("rejected")]),t._v("，然后继续执行后续代码。\n"),s("code",[t._v("setTimeout")]),t._v(" 是一个宏任务，它会在指定的延迟时间后将回调函数放入宏任务队列等待执行。")])])]),t._v(" "),s("li",[s("p",[t._v("js的执行逻辑")]),t._v(" "),s("ul",[s("li",[t._v("js是单线程的，一次只能执行一个任务，当执行完一个宏任务后，会检查所有微任务，如果有微任务，则执行微任务，如果没有微任务，则执行下一个宏任务。")]),t._v(" "),s("li",[t._v("具体来说，微任务的执行优先级高于宏任务。也就是说，在一个宏任务执行完后，会立即清空微任务队列，将其中的所有微任务依次执行完毕，然后再去执行下一个宏任务")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/storm.github.io/loop.png",alt:"An image"}}),t._v(" "),s("strong",[t._v("总结：")]),t._v(" js代码在执行的时候，会先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，\n微任务执行完毕后，再将异步宏任务从队列中调入主线程执行，一直循环至所有的任务执行完毕（完成一次事件循环EventLoop）。\n"),s("strong",[t._v("注意：")]),t._v(" 每个异步宏任务执行完之后，都会检查是否存在待执行的微任务；如果有，则执行完所有的微任务之后，再继续执行下一个宏任务。")])])]),t._v(" "),s("h2",{attrs:{id:"微医-promise-构造函数是同步执行还是异步执行-那么-then-方法呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微医-promise-构造函数是同步执行还是异步执行-那么-then-方法呢"}},[t._v("#")]),t._v(" （微医）Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？")]),t._v(" "),s("p",[t._v("Promise 构造函数是同步执行，then 方法是异步执行。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promise "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//promise实例后的第一个then")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//resolve()传入的值5；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\npromise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//promise实例后的第二个then")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行顺序为124536")]),t._v("\n")])])]),s("p",[t._v("在 "),s("code",[t._v("Promise")]),t._v(" 中，"),s("code",[t._v("resolve")]),t._v(" 和 "),s("code",[t._v("reject")]),t._v(" 本身的调用是同步的，但它们触发的后续 "),s("code",[t._v("then")]),t._v(" 或 "),s("code",[t._v("catch")]),t._v(" 中的回调函数的执行是异步的。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myPromise "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'同步执行这部分'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'成功的值'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这部分也是同步执行的'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmyPromise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'异步执行这里，值为:'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出顺序为：同步执行这部分，这部分也是同步执行的，异步执行这里，值为: 成功的值")]),t._v("\n")])])]),s("h2",{attrs:{id:"以下判断数组的方法-请分别介绍它们之间的区别和优劣-object-prototype-tostring-call-、-instanceof-以及-array-isarray"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以下判断数组的方法-请分别介绍它们之间的区别和优劣-object-prototype-tostring-call-、-instanceof-以及-array-isarray"}},[t._v("#")]),t._v(" 以下判断数组的方法，请分别介绍它们之间的区别和优劣：Object.prototype.toString.call() 、 instanceof 以及 Array.isArray()")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object.prototype.toString.call()")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object.prototype.toString.call()")]),t._v(" 是一个全局方法，用于返回对象的字符串形式，返回的字符串形式为 "),s("code",[t._v("[object 类型]")]),t._v("，其中 "),s("code",[t._v("类型")]),t._v(" 是对象的类型。")])])]),t._v(" "),s("li",[s("code",[t._v("instanceof")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("instanceof")]),t._v(" 是一个运算符，用于判断一个对象是否是某个类的实例。")])])]),t._v(" "),s("li",[s("code",[t._v("Array.isArray()")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Array.isArray()")]),t._v(" 是一个全局方法，用于判断一个对象是否是数组。")])])])]),t._v(" "),s("h2",{attrs:{id:"promise的相关api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise的相关api"}},[t._v("#")]),t._v(" promise的相关api")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("静态方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Promise.all()")]),t._v(" "),s("p",[s("code",[t._v("Promise.all()")]),t._v(" 方法是 promise 并发方法之一。它可用于聚合多个 Promise 的结果。通常在有多个相关的异步任务并且整个代码依赖于这些任务成功完成时使用，我们希望在代码执行继续之前完成所有任务。\n"),s("code",[t._v("Promise.all()")]),t._v(" 方法会在任何一个输入的 Promise 被拒绝时立即拒绝。\n相比之下，"),s("code",[t._v("Promise.allSettled()")]),t._v(" 方法返回的 Promise 会等待所有输入的 Promise 完成，不管其中是否有 Promise 被拒绝。如果你需要获取输入可迭代对象中每个 Promise 的最终结果，则应使用 allSettled() 方法")])]),t._v(" "),s("li",[s("p",[t._v("Promise.allSettled()")]),t._v(" "),s("p",[s("code",[t._v("Promise.allSettled()")]),t._v(" 方法是 promise 并发方法之一。在你有多个不依赖于彼此成功完成的异步任务时，或者你总是想知道每个 promise 的结果时，使用 "),s("code",[t._v("Promise.allSettled()")]),t._v("。\n相比之下，如果任务相互依赖，或者如果你想在任何 promise 被拒绝时立即拒绝，"),s("code",[t._v("Promise.all()")]),t._v(" 返回的 Promise 可能更合适。")])]),t._v(" "),s("li",[s("p",[t._v("Promise.any()")]),t._v(" "),s("p",[s("code",[t._v("Promise.any()")]),t._v(" 会以第一个兑现的 Promise 来兑现，即使有 Promise 先被拒绝\n"),s("code",[t._v("Promise.any()")]),t._v(" 方法是 Promise 并发方法之一。该方法对于返回第一个兑现的 Promise 非常有用。一旦有一个 Promise 兑现，它就会立即返回，因此不会等待其他 Promise 完成")])]),t._v(" "),s("li",[s("p",[t._v("Promise.race()")])])]),t._v(" "),s("p",[t._v("在多个promise并发时，"),s("code",[t._v("promise.race()")]),t._v("用于判断哪个先完成，即只需要等待其中一个完成即可。")]),t._v(" "),s("ul",[s("li",[t._v("Promise.resolve()")]),t._v(" "),s("li",[t._v("Promise.reject()")])])]),t._v(" "),s("li",[s("p",[t._v("实例方法")]),t._v(" "),s("ul",[s("li",[t._v("Promise.prototype.then()")]),t._v(" "),s("li",[t._v("Promise.prototype.catch()")]),t._v(" "),s("li",[t._v("Promise.prototype.finally()")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);